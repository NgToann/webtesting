//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebsiteTesting.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SewingMachineEntities : DbContext
    {
        public SewingMachineEntities()
            : base("name=SewingMachineEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AccessControl> AccessControls { get; set; }
        public DbSet<Machine> Machines { get; set; }
        public DbSet<Schedule> Schedules { get; set; }
        public DbSet<UserSM> UserSMs { get; set; }
        public DbSet<ScheduleDetail> ScheduleDetails { get; set; }
    
        public virtual ObjectResult<spm_SelectMachine_Result> spm_SelectMachine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spm_SelectMachine_Result>("spm_SelectMachine");
        }
    
        public virtual ObjectResult<spm_SelectSchedule_Result> spm_SelectSchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spm_SelectSchedule_Result>("spm_SelectSchedule");
        }
    
        public virtual ObjectResult<spm_SelectScheduleByMachineTypeFromTo_Result> spm_SelectScheduleByMachineTypeFromTo(string machineType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var machineTypeParameter = machineType != null ?
                new ObjectParameter("MachineType", machineType) :
                new ObjectParameter("MachineType", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spm_SelectScheduleByMachineTypeFromTo_Result>("spm_SelectScheduleByMachineTypeFromTo", machineTypeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<spm_SelectUserSM_Result> spm_SelectUserSM()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spm_SelectUserSM_Result>("spm_SelectUserSM");
        }
    
        public virtual int spm_UpdateBarcodeSewingMachine(Nullable<int> machineId, string barcode)
        {
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spm_UpdateBarcodeSewingMachine", machineIdParameter, barcodeParameter);
        }
    
        public virtual int spm_DeleteScheduleDetail(Nullable<int> scheduleDetailId)
        {
            var scheduleDetailIdParameter = scheduleDetailId.HasValue ?
                new ObjectParameter("ScheduleDetailId", scheduleDetailId) :
                new ObjectParameter("ScheduleDetailId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spm_DeleteScheduleDetail", scheduleDetailIdParameter);
        }
    
        public virtual int spm_InsertSchedule(Nullable<int> machineId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string style, string patternNo, string lineName, string createdBy)
        {
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var styleParameter = style != null ?
                new ObjectParameter("Style", style) :
                new ObjectParameter("Style", typeof(string));
    
            var patternNoParameter = patternNo != null ?
                new ObjectParameter("PatternNo", patternNo) :
                new ObjectParameter("PatternNo", typeof(string));
    
            var lineNameParameter = lineName != null ?
                new ObjectParameter("LineName", lineName) :
                new ObjectParameter("LineName", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spm_InsertSchedule", machineIdParameter, fromDateParameter, toDateParameter, styleParameter, patternNoParameter, lineNameParameter, createdByParameter);
        }
    
        public virtual int spm_InsertScheduleDetail(string scheduleDetailId, Nullable<int> machineId, Nullable<System.DateTime> scheduleDate)
        {
            var scheduleDetailIdParameter = scheduleDetailId != null ?
                new ObjectParameter("ScheduleDetailId", scheduleDetailId) :
                new ObjectParameter("ScheduleDetailId", typeof(string));
    
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(int));
    
            var scheduleDateParameter = scheduleDate.HasValue ?
                new ObjectParameter("ScheduleDate", scheduleDate) :
                new ObjectParameter("ScheduleDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spm_InsertScheduleDetail", scheduleDetailIdParameter, machineIdParameter, scheduleDateParameter);
        }
    
        public virtual ObjectResult<spm_SelectScheduleFromTo_Result> spm_SelectScheduleFromTo(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spm_SelectScheduleFromTo_Result>("spm_SelectScheduleFromTo", fromDateParameter, toDateParameter);
        }
    
        public virtual int spm_UpdateMachineBarcode(Nullable<int> machineId, string barcode)
        {
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(int));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spm_UpdateMachineBarcode", machineIdParameter, barcodeParameter);
        }
    }
}
